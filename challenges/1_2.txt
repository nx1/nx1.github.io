Locate smallest window to be sorted
-----------------------------------
Input:
[3,7,5,6,9]

Output:
(1,3)

Given an array of integers that are out of order, determine the bounds of the
smallest window that must be sorted in order for the entire array to be sorted.
For example, given [3, 7, 5, 6, 9], you should return (1, 3).

To solve this problem, I don't believe it is necessary to actually sort the
entire array. But for now I will use an insertion sort where I loop over the
entire array and find the lowest value, I then switch the positions of the
lowest and first values in the array. I then loop over the remaining values in
the array performing the same operation until the entire array is sorted.

The suggestion for solving the problem involves however sorting the entire
array and then comparing the sorted array to original and finding which values
have not changed at the start and end of it.

This turns out to be a lot simpler than trying to do everything in the 1 loop
as you can always change the sort function to do the job in a better way.




-----------
Norman Khan
26/03/2023
